#Introduction to MongoDb + Installation

MongoDb Tutorial- Introduction to MongoDb + Installation
In this tutorial, we are going to learn about MongoDb and how to use and install it. It is a very easy to use database. Let us first understand what MongoDb is.

What is MongoDb?

If you belong to the software industry field, then you must have heard about MongoDb. It is a bit faster than the other traditional databases like RDBMS or MySQL. Some of its main highlights are-

No SQL Database
Document oriented
Open source, cross platform, document oriented database written in C++
Develop Faster
Deploy Easier
Scale Bigger
MongoDb development started in 2007
MongoDb 2.4.9 was the latest and stable version- released on January 10, 2014.
What is meant by a Document Oriented Database?

Simply, a document oriented database means which stores its data in the form of documents.

MongoDb stores data as documents, so it is known as a document oriented database.
Data is stored in the form of BSON. BSON is almost similar to JSON with the only difference that types of variables are declared in it.
If you are coming from the DBMS background, then following changes are there-
Database is referred to as a database.
Table is referred to as a collection.
Row is referred to as documents



Mongo and Mongod

By default while installing MongoDb, it gets started on port 27017.

Mongod is the host process for the database.
Mongo is the command line shell that connects to a specific instance of mongod. 
When you run mongo with no parameters it defaults to connecting to the local host on port 27017.
If you run mongo against an invalid host_machine: port combination then it will fail to connect.
To make it simpler, Mongod is like a plate and mongo is like a spoon. You need to put a spoon in a plate to eat the food. In the same way, mongo is needed to run the database for mongodb.

You can begin to download MongoDb from here.

Now you have to go to C: drive > program files > MongoDb > Server > 4.2 > bin, and then copy the path of the bin


Now open the Windows Powershell admin and write mongo

Now open another window of powershell and write mongo in it. Then on the other scene you will get the message

It means a connection is established.

------------------------------------------------------------

#Inserting data into the Mongo Database

create database in mongo db

use database name

if datbase not exist , then new databse will be created. if database exist then we will switch to that databse. e.g. if we want to create harrykart datbase

use harrykart

use the collection as following

db.items.insertOne({name: "Samsung 30s", price: 22000, rating: 4.5, qty: 233, sold: 98})

In the above code, we have made a document collection whose name is Samsung 30s, price is 22000, rating is 4.5, and so on. However, we can include many documents inside it.

Now we will see how we can insert multiple documents. For this, we will use the function known as insertMany. We can insert different arrays in this separated with comma.

db.items.insertMany([{name: "Samsung 30s", price: 22000, rating: 4.5, qty: 233, sold: 98}, {name: "Moto 30s", price: 29000, rating: 3.5, qty: 133, sold: 598}, {name: "Realme 80s", price: 129000, rating: 2.5, qty: 633, sold: 98, isBig: true}])


To see the whole list of documents written by us, we can write- db.items.find(). The data stored in the data directory will never get deleted until you do it manually. The process takes up the commands one by one and stores it in the data.

show dbs  command will show all the datbases

-----------------------------------------------------------------------------------

$ show collections

it will show all collections (tables) in the datbase

note:- mongo db does not follow any schema

Query in mongo db like where condition

db.items.find({rating:3.5})

----------------------------------------------

#Searching/Querying data from the Mongo Database

To view all the database, we will write as show dbs and we will get the output as follows-

To query our database, we can write as 

db.items.find({rating: 3.5})
The above code will give the list of those items having the rating as 3.5 


// Searching for data in mongo db
use harryKart

// This query will return all the objects with rating equal to 3.5
db.items.find({rating: 3.5})


We can also use and operator to meet our query. The example is as follows-

db.items.find({rating: {$gt: 3.5}, price:{$gt: 4000}})
This code will give the list of all those items having ratings greater than 3.5 and having prices more than 4000.

If we write as-

db.items.find({rating: {$lt: 3.5}, price:{$gt: 114000}})


We will get the output as the list of those items whose ratings are less than 3.5 and price more than 114000.

Till now you must have noticed that in the case of And operator, we have not used any symbol. But it is not the same in the case of Or. While using OR operator, we will use a dollar ‘$’ symbol as follows-

db.items.find({ 
    $or:[{rating: {$lt: 3.5}}, {price:{$gt: 114000}}] 

})


-----------------------------------------------------------------------------------------------------

#Deleting data from the Mongo Database

following are the delete commands


show dbs 
use harryKart
show collections

db.items.find({price: 22000})

// Deleting items from the Mongo Database
db.items.deleteOne({price: 22000})
// deleteOne will delete the matching document entry and will delete the first entry in case of multi document match
db.items.deleteMany({price: 129000})


To view all the databases, we will write show dbs and to use the database, we can write use harrykart, to use this database. To view all the items in the database, we can write db.items.find().

To make you understand better, the process of deleting the item from a database is a bit similar to that of searching. It is because the syntax of deleting is almost similar to that of searching.


-------------------------------------------------------------------------------

#Updating data from the Mongo Database

show dbs 
use harryKart
show collections

db.items.find()
db.items.updateOne({name: "Moto 30s"}, {$set: {price: 2}})
db.items.find()
db.items.updateMany({name: "Moto 30s"}, {$set: {price: 3, rating: 1}})

-----------------------------------------------------------------------------------------------------


# MongoDb Compass & Installing Mongoose

MongoDb Compass and Installing Mongoose
In this tutorial, we are going to learn about Mongoose and how to use it in MondoDb. Although most of you must be thinking that Mongoose and Mongo are similar things but they have a lot of differences in them. Mongoose will help you to access MongoDb directly without any hindrance.

First let us understand what MongoDb Compass is? After writing “compass” in your search tab

Before knowing about MongoDb compass and its use, we will initiate our Mongod process as usual as it is the main database process. MongoDb Compass’s task is similar to that of Mongo Shell but in an easier way.

MongoDB Compass analyzes your documents and displays rich structures within your collections through an intuitive GUI. It allows you to quickly visualize and explore your schema to understand the frequency, types and ranges of fields in your data set.

It does not let you type the commands. It’s not the matter that we cannot type the commands but a person who is managing a database and wants to add certain data without any coding, he can use MongoDb compass.

For connecting the MongoDb Compass with Mongo database, you need to click on New Collection > Fill in Connection Fields Individually > Connect. 

It is showing all the databases which we have created till now. Since we are working with harryKart, we will click on it